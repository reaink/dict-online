datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

/// Casbin权限记录
model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

/// 用户注册类型
enum SignUpType {
  USERNAME
  WECHAT
}

enum UserStatus {
  ENABLE
  DISABLE
}

/// 用户
model User {
  id               Int           @id @default(autoincrement())
  createAt         DateTime      @default(now())
  updateAt         DateTime      @updatedAt
  name             String?       @unique
  nickname         String?
  password         String?
  phone            String?
  status           UserStatus    @default(ENABLE)
  roles            Role[]
  signUpType       SignUpType    @default(WECHAT)
  wechat           Wechat?       @relation(fields: [wechatId], references: [id], onDelete: Cascade)
  wechatId         Int?          @unique
  notices          Notice[]
  phrases          Phrase[]
  issues           Issue[]
  likePullReqeusts PullRequest[]
}

/// 词条类型
enum PhraseType {
  /// 单字
  Single
  /// 词组
  Phrase
  /// 短句
  Sentence
  /// 符号
  Symbol
  /// 链接
  Link
  /// 诗句
  Poem
  /// 其他
  Other
}

/// 词条状态
enum PhraseStatus {
  /// 完成状态
  Finish
  /// 草案
  Draft
  /// 拒绝
  Reject
}

/// 词条
model Phrase {
  id           Int           @id @default(autoincrement())
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  /// 词条
  word         String
  /// 编码
  code         String
  /// 类型
  type         PhraseType
  /// 词频
  index        Int
  /// 状态
  status       PhraseStatus
  /// 评论
  comments     Comment[]
  /// 发起人
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  /// 标签
  tags         Tag[]
  /// 关联PR
  pullRequests PullRequest[]

  @@unique([word, code])
}

/// 标签
/// 用于搜索关联词条
model Tag {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  name     String
  phrases  Phrase[]
}

/// 词组-评论
model Comment {
  id        Int       @id @default(autoincrement())
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  content   String
  comments  Comment[] @relation("CommentToComment")
  comment   Comment?  @relation("CommentToComment", fields: [commentId], references: [id])
  commentId Int?
  phrase    Phrase?   @relation(fields: [phraseId], references: [id])
  phraseId  Int?
  issue     Issue?    @relation(fields: [issueId], references: [id])
  issueId   Int?
}

/// 词条操作类型
enum PullRequestType {
  /// 创建
  Create
  /// 修改
  Change
  /// 删除
  Delete
}

enum PullRequestStatus {
  /// 待审核
  Pending
  /// 审核通过
  Approved
  /// 审核拒绝
  Rejected
}

/// 词条-拉取请求
/// 记录如何去调整一个词条
model PullRequest {
  id       Int               @id @default(autoincrement())
  createAt DateTime          @default(now())
  updateAt DateTime          @updatedAt
  phrase   Phrase?           @relation(fields: [phraseId], references: [id])
  phraseId Int?
  word     String?
  code     String?
  index    Int?
  type     PullRequestType
  status   PullRequestStatus @default(Pending)
  issue    Issue[]
  likes    User[]
}

/// 词条-发起讨论问题
model Issue {
  id           Int           @id @default(autoincrement())
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  content      String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  status       Boolean       @default(true)
  pullRequests PullRequest[]
  comments     Comment[]
}

/// 权限-角色
model Role {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  value    String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  users    User[]
}

/// 微信
model Wechat {
  id        Int      @id @default(autoincrement())
  openid    String   @unique
  unionid   String?  @unique
  avatarUrl String?
  city      String?
  country   String?
  gender    Int?     @db.SmallInt
  language  String?
  nickName  String?
  province  String?
  user      User?
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

/// 通知
model Notice {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  content   String
  createdAt DateTime  @default(now())
  publishAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

/// 权限-权限
model Permission {
  id      Int                @id @default(autoincrement())
  name    String             @unique
  value   String             @unique
  actions PermissionAction[]
}

/// 权限-权限操作
model PermissionAction {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  value       String       @unique
  permissions Permission[]
}
